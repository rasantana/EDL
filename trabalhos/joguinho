function love.load()
	player = {
		grid_x = 256,
		grid_y = 256,
		act_x = 200,
		act_y = 200,
		speed = 10
	}
	bomb = {
		grid_x = 0,
		grid_y = 0,
		initTime = 0,
		timeExplosion = 3,
		distanceExplosion = 5,
		existBomb=false
	}
	--0: Blank space
	--1: Block
	--2: Stone
	--3: Bomb
	--4: Current position of the player
	map = {
		{ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 },
		{ 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 2, 1 },
		{ 1, 2, 1, 1, 0, 2, 2, 0, 1, 0, 0, 1, 0, 1 },
		{ 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1 },
		{ 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 2, 0, 0, 1 },
		{ 1, 2, 0, 1, 0, 0, 0, 0, 1, 0, 0, 2, 0, 1 },
		{ 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 },
		{ 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 },
		{ 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 },
		{ 1, 0, 0, 1, 0, 0, 0, 2, 1, 1, 1, 1, 0, 1 },
		{ 1, 0, 0, 1, 0, 0, 0, 2, 1, 0, 0, 0, 0, 1 },
		{ 1, 0, 0, 0, 0, 0, 0, 2, 1, 2, 0, 2, 0, 1 },
		{ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 }
	}
	mapExplosion={} 
	mapColor = {255, 255, 255, 255}
	playerColor= {100, 125, 125, 125}
	sideSquare=32
	teste =0
end
 
function love.update(dt)
	player.act_y = player.act_y - ((player.act_y - player.grid_y) * player.speed * dt)
	player.act_x = player.act_x - ((player.act_x - player.grid_x) * player.speed * dt)
end
 
function love.draw()
	
	love.graphics.setColor(playerColor)
	love.graphics.rectangle("fill", player.act_x, player.act_y, sideSquare, sideSquare)
	createMap()
	if(bomb.existBomb==true) then
		love.graphics.rectangle("line", bomb.grid_x,bomb.grid_y,sideSquare, sideSquare)
	end
	love.graphics.print("teste: " .. teste,490,60)	
	love.graphics.print("player.grid_x: " .. player.grid_x,490,80)
	love.graphics.print("player.grid_y: " .. player.grid_y,490,100)	
	love.graphics.print("bomb.grid_x: " .. bomb.grid_x,490,120)
	love.graphics.print("bomb.grid_y: " .. bomb.grid_y,490,140)	
	
	explosion()
	printMap()
end

function createMap()
	love.graphics.setColor(mapColor)
	for y=1, #map do
		for x=1, #map[y] do
			if map[y][x] == 1 then
				love.graphics.rectangle("fill", x * sideSquare,y * sideSquare, sideSquare, sideSquare)
			end
			if map[y][x] == 2 then
				love.graphics.rectangle("line", x * sideSquare, y * sideSquare, sideSquare, sideSquare)
			end
		end
	end
end

function printMap()
	local y,x
	for y=1, #map do
		for x=1, #map[y] do
			if x==1 then
				love.graphics.print("{ " .. map[y][x] .. ", ",480+(x*15),160+(y*10))	
			elseif x==#map[y] then
				love.graphics.print(", " .. map[y][x] .. "}",480+(x*15),160+(y*10))	
			else 
				love.graphics.print(", " .. map[y][x] .. " ",480+(x*15),160+(y*10))	
			end
		end
	end
end 

function love.keypressed(key)
	if key == "up" then
		if noCollision(0, -1) then
			player.grid_y = player.grid_y - sideSquare
		end
	elseif key == "down" then
		if noCollision(0, 1) then
			player.grid_y = player.grid_y + sideSquare
		end
	elseif key == "left" then
		if noCollision(-1, 0) then
			player.grid_x = player.grid_x - sideSquare
		end
	elseif key == "right" then
		if noCollision(1, 0) then
			player.grid_x = player.grid_x + sideSquare
		end
	elseif key == "space" then
		if(bomb.existBomb==false) then
			bomb.grid_x=player.grid_x 
			bomb.grid_y=player.grid_y
			map[bomb.grid_y/sideSquare][bomb.grid_x/sideSquare]=3
			bomb.initTime = love.timer.getTime()
			bomb.existBomb=true
		end
	end
end
 
function noCollision(x, y)
	if map[(player.grid_y / sideSquare) + y][(player.grid_x / sideSquare) + x] == 1 or
	   map[(player.grid_y / sideSquare) + y][(player.grid_x / sideSquare) + x] == 2 
	then
		return false
	end
	if(bomb.existBomb==true) then
		if map[(player.grid_y / sideSquare) + y][(player.grid_x / sideSquare) + x] == 3 then
			return false
		end
	end
	return true
end

function explosion()
	if(bomb.existBomb==true) then
		local currentTime = love.timer.getTime()
		local timeResult = math.floor(currentTime - bomb.initTime)
		if(timeResult > bomb.timeExplosion) then
			collision(0, 1)
			collision(0, -1)
			collision(1, 0)
			collision(-1, 0)
			bomb.existBomb=false
			map[(bomb.grid_y / sideSquare)][(bomb.grid_x / sideSquare)] = 0
		end
	end
end

function collision(x, y)
	local i=1
	for i=1, bomb.distanceExplosion do	
		love.graphics.rectangle("fill", bomb.grid_x  + (x*i*sideSquare),bomb.grid_y + (y*i*sideSquare), sideSquare, sideSquare)
		
		if map[(bomb.grid_y / sideSquare) + (y*i)][(bomb.grid_x / sideSquare) + (x*i)] == 2 
		then	
			map[(bomb.grid_y / sideSquare) + (y*i)][(bomb.grid_x / sideSquare) + (x*i)] = 0
			teste = #map
			--No caso de uma melhoria no qual se pega um objeto na tela onde a bomba ultrapassa blocos, esse break deve estar dentro de um if do tipo
			--if(nao pegou o item)
			break
		end		
		if map[(bomb.grid_y / sideSquare) + (y*i)][(bomb.grid_x / sideSquare) + (x*i)] == 1 
		then	
			break
		end	
	end
end
